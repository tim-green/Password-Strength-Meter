{"version":3,"sources":["components/FormField.js","components/EmailField.js","components/PasswordField.js","components/JoinForm.js","App.js","registerServiceWorker.js","index.js"],"names":["FormField","state","value","dirty","errors","hasChanged","e","preventDefault","_this$props","_this","props","label","_this$props$required","required","_this$props$validator","validator","f","_this$props$onStateCh","onStateChanged","target","isEmpty","length","requiredMissing","concat","Object","toConsumableArray","message","setState","_ref","_ref$dirty","_this$state","this","_this$props2","type","fieldId","placeholder","children","hasErrors","controlClass","join","trim","react_default","a","createElement","react","className","htmlFor","id","onChange","Component","EmailField","restProps","objectWithoutProperties","components_FormField","assign","validate","Error","PasswordField","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","stateChanged","password","strength","zxcvbn","score","validatePasswordStrong","thresholdLength","minStrength","_props$minStrength","_props$thresholdLengt","Math","max","min","passwordLength","passwordStrong","passwordLong","counterClass","strengthClass","data-strength","JoinForm","fullname","email","fieldStateChanged","field","defineProperty","emailChanged","fullnameChanged","passwordChanged","formValidated","action","method","noValidate","test","components_EmailField","components_PasswordField","App","components_JoinForm","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8bec7c3e.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nclass FormField extends Component {\n\n  // initialize state\n  state = { value: '', dirty: false, errors: [] }\n\n  hasChanged = e => {\n    e.preventDefault();\n\n    // destructure props - assign default dummy functions to validator and onStateChanged props\n    const { label, required = false, validator = f => f, onStateChanged = f => f } = this.props;\n\n    const value = e.target.value;\n    const isEmpty = value.length === 0;\n    const requiredMissing = this.state.dirty && required && isEmpty;\n\n    let errors = [];\n\n    if (requiredMissing) {\n      // if required and is empty, add required error to state\n      errors = [ ...errors, `${label} is required` ];\n    } else if ('function' === typeof validator) {\n      try {\n        validator(value);\n      } catch (e) {\n        // if validator throws error, add validation error to state\n        errors = [ ...errors, e.message ];\n      }\n    }\n\n    // update state and call the onStateChanged callback fn after the update\n    // dirty is only changed to true and remains true on and after the first state update\n    this.setState(({ dirty = false }) => ({ value, errors, dirty: !dirty || dirty }), () => onStateChanged(this.state));\n  }\n\n  render() {\n    const { value, dirty, errors } = this.state;\n    const { type, label, fieldId, placeholder, children } = this.props;\n\n    const hasErrors = errors.length > 0;\n    const controlClass = ['form-control', dirty ? hasErrors ? 'is-invalid' : 'is-valid' : '' ].join(' ').trim();\n\n    return (\n      <Fragment>\n        <div className=\"form-group px-3 pb-2\">\n          <div className=\"d-flex flex-row justify-content-between align-items-center\">\n            <label htmlFor={fieldId} className=\"control-label\">{label}</label>\n            {/** Render the first error if there are any errors **/}\n            { hasErrors && <div className=\"error form-hint font-weight-bold text-right m-0 mb-2\">{ errors[0] }</div> }\n          </div>\n          {/* Render the children nodes passed to component */}\n          {children}\n          <input type={type} className={controlClass} id={fieldId} placeholder={placeholder} value={value} onChange={this.hasChanged} />\n        </div>\n      </Fragment>\n    );\n  }\n\n}\n\nFormField.propTypes = {\n  type: PropTypes.oneOf([\"text\", \"password\"]).isRequired,\n  label: PropTypes.string.isRequired,\n  fieldId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  children: PropTypes.node,\n  validator: PropTypes.func,\n  onStateChanged: PropTypes.func\n};\n\nexport default FormField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { validate } from 'isemail';\n\nimport FormField from './FormField';\n\nconst EmailField = props => {\n\n  // prevent passing type and validator props from this component to the rendered form field component\n  const { type, validator, ...restProps } = props;\n\n  // validateEmail function using the validate() method of the isemail package\n  const validateEmail = value => {\n    if (!validate(value)) throw new Error('Email is invalid');\n  };\n\n  // pass the validateEmail to the validator prop\n  return <FormField type=\"text\" validator={validateEmail} {...restProps} />\n};\n\nEmailField.propTypes = {\n  label: PropTypes.string.isRequired,\n  fieldId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  children: PropTypes.node,\n  onStateChanged: PropTypes.func\n};\n\nexport default EmailField;\n","import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport zxcvbn from 'zxcvbn';\n\nimport FormField from './FormField';\n\nclass PasswordField extends Component {\n\n  constructor(props) {\n\n    super(props);\n    const { minStrength = 3, thresholdLength = 7 } = props;\n\n    // set default minStrength to 3 if not a number or not specified\n    // minStrength must be a a number between 0 - 4\n\n    this.minStrength = typeof minStrength === 'number'\n      ? Math.max( Math.min(minStrength, 4), 0 )\n      : 3;\n\n    // set default thresholdLength to 7 if not a number or not specified\n    // thresholdLength must be a minimum value of 7\n\n    this.thresholdLength = typeof thresholdLength === 'number'\n      ? Math.max(thresholdLength, 7)\n      : 7;\n\n    // initialize internal component state\n    this.state = { password: '', strength: 0 };\n  }\n\n  stateChanged = state => {\n\n    // update the internal state using the updated state from the form field\n\n    this.setState({\n      password: state.value,\n      strength: zxcvbn(state.value).score\n    }, () => this.props.onStateChanged(state));\n\n  };\n\n  validatePasswordStrong = value => {\n    // ensure password is long enough\n    if (value.length <= this.thresholdLength) throw new Error(\"Password is short\");\n\n    // ensure password is strong enough using the zxcvbn library\n    if (zxcvbn(value).score < this.minStrength) throw new Error(\"Password is weak\");\n  };\n\n  render() {\n    const { type, validator, onStateChanged, children, ...restProps } = this.props;\n    const { password, strength } = this.state;\n\n    const passwordLength = password.length;\n    const passwordStrong = strength >= this.minStrength;\n    const passwordLong = passwordLength > this.thresholdLength;\n\n    // dynamically set the password length counter class\n    const counterClass = ['badge badge-pill', passwordLong ? passwordStrong ? 'badge-success' : 'badge-warning' : 'badge-danger'].join(' ').trim();\n\n    // password strength meter is only visible when password is not empty\n    const strengthClass = ['strength-meter mt-2', passwordLength > 0 ? 'visible' : 'invisible'].join(' ').trim();\n\n    return (\n      <Fragment>\n        <div className=\"position-relative\">\n          {/** Pass the validation and stateChanged functions as props to the form field **/}\n          <FormField type=\"password\" validator={this.validatePasswordStrong} onStateChanged={this.stateChanged} {...restProps}>\n            <span className=\"d-block form-hint\">To conform with our Strong Password policy, you are required to use a sufficiently strong password. Password must be more than 7 characters.</span>\n            {children}\n            {/** Render the password strength meter **/}\n            <div className={strengthClass}>\n              <div className=\"strength-meter-fill\" data-strength={strength}></div>\n            </div>\n          </FormField>\n          <div className=\"position-absolute password-count mx-3\">\n            {/** Render the password length counter indicator **/}\n            <span className={counterClass}>{ passwordLength ? passwordLong ? `${this.thresholdLength}+` : passwordLength : '' }</span>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n\n}\n\nPasswordField.propTypes = {\n  label: PropTypes.string.isRequired,\n  fieldId: PropTypes.string.isRequired,\n  placeholder: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  children: PropTypes.node,\n  onStateChanged: PropTypes.func,\n  minStrength: PropTypes.number,\n  thresholdLength: PropTypes.number\n};\n\nexport default PasswordField;\n","import React, { Component } from 'react';\n\nimport FormField from './FormField';\nimport EmailField from './EmailField';\nimport PasswordField from './PasswordField';\n\nclass JoinForm extends Component {\n\n  // initialize state to hold validity of form fields\n  state = { fullname: false, email: false, password: false }\n\n  // higher-order function that returns a state change watch function\n  // sets the corresponding state property to true if the form field has no errors\n  fieldStateChanged = field => state => this.setState({ [field]: state.errors.length === 0 });\n\n  // state change watch functions for each field\n  emailChanged = this.fieldStateChanged('email');\n  fullnameChanged = this.fieldStateChanged('fullname');\n  passwordChanged = this.fieldStateChanged('password');\n\n  render() {\n    const { fullname, email, password } = this.state;\n    const formValidated = fullname && email && password;\n\n    // validation function for the fullname\n    // ensures that fullname contains at least two names separated with a space\n    const validateFullname = value => {\n      const regex = /^[a-z]{2,}(\\s[a-z]{2,})+$/i;\n      if (!regex.test(value)) throw new Error('Full name is invalid');\n    };\n\n    return (\n      <div className=\"form-container d-table-cell position-relative align-middle\">\n        <form action=\"/\" method=\"POST\" noValidate>\n\n          <div className=\"d-flex flex-row justify-content-between align-items-center px-3 mb-5\">\n            <legend className=\"form-label mb-0\">PW Strength Meter</legend>\n            {/** Show the form button only if all fields are valid **/}\n            { formValidated && <button type=\"button\" className=\"btn btn-primary text-uppercase px-3 py-2\">Join</button> }\n          </div>\n\n          <div className=\"py-5 border-gray\">\n            {/** Render the fullname form field passing the name validation fn **/}\n            <FormField type=\"text\" fieldId=\"fullname\" label=\"Full name\" placeholder=\"Enter fullname\" validator={validateFullname} onStateChanged={this.fullnameChanged} required />\n\n            {/** Render the email field component **/}\n            <EmailField fieldId=\"email\" label=\"Email\" placeholder=\"Enter email address\" onStateChanged={this.emailChanged} required />\n\n            {/** Render the password field component using thresholdLength of 7 and minStrength of 3 **/}\n            <PasswordField fieldId=\"password\" label=\"Password\" placeholder=\"Enter Password\" onStateChanged={this.passwordChanged} thresholdLength={7} minStrength={3} required />\n          </div>\n\n        </form>\n      </div>\n    );\n  }\n\n}\n\nexport default JoinForm;\n","import React from 'react';\nimport JoinForm from './components/JoinForm';\nimport './App.css';\n\nconst App = () => (\n\t<div className=\"main-container d-table position-absolute m-auto\">\n\t\t<JoinForm />\n\t</div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}